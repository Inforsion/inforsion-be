generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @db.VarChar(255)
  email     String   @unique @db.VarChar(255)
  password  String   @db.VarChar(255)
  createdAt DateTime @db.DateTime(0)
  updatedAt DateTime @db.DateTime(0)
  stores    Store[]
}

model Store {
  id           Int      @id @default(autoincrement())
  name         String   @db.VarChar(255)
  location     String   @db.VarChar(255)
  description  String?  @db.Text
  phoneNumber  String?  @db.VarChar(255)
  email        String?  @db.VarChar(255)
  openingHours Json?
  isActive     Boolean? @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
  userId       Int      @db.Int
  users        User     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "stores_ibfk_1")
  products     Product[]
  inventory    Inventory[]

  @@index([userId], map: "userId")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  price       Decimal  @db.Decimal(10, 2)
  category    String?
  imageUrl    String?
  isSignature Boolean  @default(false)
  inStock     Boolean  @default(true)
  storeId     Int
  store       Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  ingredients Ingredient[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([storeId])
}

model Ingredient {
  id               Int      @id @default(autoincrement())
  name             String   @unique
  amountPerProduct Decimal  @db.Decimal(10, 2)
  unit             String
  productId        Int
  product          Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  Inventory        Inventory[]

  @@index([productId])
}

model Inventory {
  id           Int        @id @default(autoincrement())
  ingredientId Int
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  quantity     Decimal    @db.Decimal(10, 2)
  expiryDate   DateTime
  updatedAt    DateTime   @updatedAt
  storeId      Int
  store        Store      @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@index([ingredientId])
  @@index([storeId])
}